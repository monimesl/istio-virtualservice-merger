// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/monimesl/operator-helper/reconciler (interfaces: Context)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
	reconciler "github.com/monimesl/operator-helper/reconciler"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	types "k8s.io/apimachinery/pkg/types"
	builder "sigs.k8s.io/controller-runtime/pkg/builder"
	client "sigs.k8s.io/controller-runtime/pkg/client"
	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockContext) Client() client.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(client.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockContextMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockContext)(nil).Client))
}

// GetResource mocks base method.
func (m *MockContext) GetResource(arg0 types.NamespacedName, arg1 client.Object, arg2, arg3 func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResource indicates an expected call of GetResource.
func (mr *MockContextMockRecorder) GetResource(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockContext)(nil).GetResource), arg0, arg1, arg2, arg3)
}

// Logger mocks base method.
func (m *MockContext) Logger() logr.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(logr.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockContextMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockContext)(nil).Logger))
}

// NewControllerBuilder mocks base method.
func (m *MockContext) NewControllerBuilder() *builder.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewControllerBuilder")
	ret0, _ := ret[0].(*builder.Builder)
	return ret0
}

// NewControllerBuilder indicates an expected call of NewControllerBuilder.
func (mr *MockContextMockRecorder) NewControllerBuilder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewControllerBuilder", reflect.TypeOf((*MockContext)(nil).NewControllerBuilder))
}

// Run mocks base method.
func (m *MockContext) Run(arg0 reconcile.Request, arg1 reconciler.KubeRuntimeObject, arg2 func(bool) error) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1, arg2)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockContextMockRecorder) Run(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockContext)(nil).Run), arg0, arg1, arg2)
}

// Scheme mocks base method.
func (m *MockContext) Scheme() *runtime.Scheme {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheme")
	ret0, _ := ret[0].(*runtime.Scheme)
	return ret0
}

// Scheme indicates an expected call of Scheme.
func (mr *MockContextMockRecorder) Scheme() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheme", reflect.TypeOf((*MockContext)(nil).Scheme))
}

// SetOwnershipReference mocks base method.
func (m *MockContext) SetOwnershipReference(arg0, arg1 v1.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOwnershipReference", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOwnershipReference indicates an expected call of SetOwnershipReference.
func (mr *MockContextMockRecorder) SetOwnershipReference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnershipReference", reflect.TypeOf((*MockContext)(nil).SetOwnershipReference), arg0, arg1)
}
