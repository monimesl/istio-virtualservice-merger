// Code generated by MockGen. DO NOT EDIT.
// Source: istio.io/client-go/pkg/clientset/versioned/typed/networking/v1alpha3 (interfaces: NetworkingV1alpha3Interface,VirtualServicesGetter,VirtualServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha3 "istio.io/client-go/pkg/apis/networking/v1alpha3"
	v1alpha30 "istio.io/client-go/pkg/clientset/versioned/typed/networking/v1alpha3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// MockNetworkingV1alpha3Interface is a mock of NetworkingV1alpha3Interface interface.
type MockNetworkingV1alpha3Interface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingV1alpha3InterfaceMockRecorder
}

// MockNetworkingV1alpha3InterfaceMockRecorder is the mock recorder for MockNetworkingV1alpha3Interface.
type MockNetworkingV1alpha3InterfaceMockRecorder struct {
	mock *MockNetworkingV1alpha3Interface
}

// NewMockNetworkingV1alpha3Interface creates a new mock instance.
func NewMockNetworkingV1alpha3Interface(ctrl *gomock.Controller) *MockNetworkingV1alpha3Interface {
	mock := &MockNetworkingV1alpha3Interface{ctrl: ctrl}
	mock.recorder = &MockNetworkingV1alpha3InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkingV1alpha3Interface) EXPECT() *MockNetworkingV1alpha3InterfaceMockRecorder {
	return m.recorder
}

// DestinationRules mocks base method.
func (m *MockNetworkingV1alpha3Interface) DestinationRules(arg0 string) v1alpha30.DestinationRuleInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestinationRules", arg0)
	ret0, _ := ret[0].(v1alpha30.DestinationRuleInterface)
	return ret0
}

// DestinationRules indicates an expected call of DestinationRules.
func (mr *MockNetworkingV1alpha3InterfaceMockRecorder) DestinationRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestinationRules", reflect.TypeOf((*MockNetworkingV1alpha3Interface)(nil).DestinationRules), arg0)
}

// EnvoyFilters mocks base method.
func (m *MockNetworkingV1alpha3Interface) EnvoyFilters(arg0 string) v1alpha30.EnvoyFilterInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvoyFilters", arg0)
	ret0, _ := ret[0].(v1alpha30.EnvoyFilterInterface)
	return ret0
}

// EnvoyFilters indicates an expected call of EnvoyFilters.
func (mr *MockNetworkingV1alpha3InterfaceMockRecorder) EnvoyFilters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvoyFilters", reflect.TypeOf((*MockNetworkingV1alpha3Interface)(nil).EnvoyFilters), arg0)
}

// Gateways mocks base method.
func (m *MockNetworkingV1alpha3Interface) Gateways(arg0 string) v1alpha30.GatewayInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gateways", arg0)
	ret0, _ := ret[0].(v1alpha30.GatewayInterface)
	return ret0
}

// Gateways indicates an expected call of Gateways.
func (mr *MockNetworkingV1alpha3InterfaceMockRecorder) Gateways(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gateways", reflect.TypeOf((*MockNetworkingV1alpha3Interface)(nil).Gateways), arg0)
}

// RESTClient mocks base method.
func (m *MockNetworkingV1alpha3Interface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockNetworkingV1alpha3InterfaceMockRecorder) RESTClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockNetworkingV1alpha3Interface)(nil).RESTClient))
}

// ServiceEntries mocks base method.
func (m *MockNetworkingV1alpha3Interface) ServiceEntries(arg0 string) v1alpha30.ServiceEntryInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceEntries", arg0)
	ret0, _ := ret[0].(v1alpha30.ServiceEntryInterface)
	return ret0
}

// ServiceEntries indicates an expected call of ServiceEntries.
func (mr *MockNetworkingV1alpha3InterfaceMockRecorder) ServiceEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceEntries", reflect.TypeOf((*MockNetworkingV1alpha3Interface)(nil).ServiceEntries), arg0)
}

// Sidecars mocks base method.
func (m *MockNetworkingV1alpha3Interface) Sidecars(arg0 string) v1alpha30.SidecarInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sidecars", arg0)
	ret0, _ := ret[0].(v1alpha30.SidecarInterface)
	return ret0
}

// Sidecars indicates an expected call of Sidecars.
func (mr *MockNetworkingV1alpha3InterfaceMockRecorder) Sidecars(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sidecars", reflect.TypeOf((*MockNetworkingV1alpha3Interface)(nil).Sidecars), arg0)
}

// VirtualServices mocks base method.
func (m *MockNetworkingV1alpha3Interface) VirtualServices(arg0 string) v1alpha30.VirtualServiceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualServices", arg0)
	ret0, _ := ret[0].(v1alpha30.VirtualServiceInterface)
	return ret0
}

// VirtualServices indicates an expected call of VirtualServices.
func (mr *MockNetworkingV1alpha3InterfaceMockRecorder) VirtualServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualServices", reflect.TypeOf((*MockNetworkingV1alpha3Interface)(nil).VirtualServices), arg0)
}

// WorkloadEntries mocks base method.
func (m *MockNetworkingV1alpha3Interface) WorkloadEntries(arg0 string) v1alpha30.WorkloadEntryInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadEntries", arg0)
	ret0, _ := ret[0].(v1alpha30.WorkloadEntryInterface)
	return ret0
}

// WorkloadEntries indicates an expected call of WorkloadEntries.
func (mr *MockNetworkingV1alpha3InterfaceMockRecorder) WorkloadEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadEntries", reflect.TypeOf((*MockNetworkingV1alpha3Interface)(nil).WorkloadEntries), arg0)
}

// WorkloadGroups mocks base method.
func (m *MockNetworkingV1alpha3Interface) WorkloadGroups(arg0 string) v1alpha30.WorkloadGroupInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadGroups", arg0)
	ret0, _ := ret[0].(v1alpha30.WorkloadGroupInterface)
	return ret0
}

// WorkloadGroups indicates an expected call of WorkloadGroups.
func (mr *MockNetworkingV1alpha3InterfaceMockRecorder) WorkloadGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadGroups", reflect.TypeOf((*MockNetworkingV1alpha3Interface)(nil).WorkloadGroups), arg0)
}

// MockVirtualServicesGetter is a mock of VirtualServicesGetter interface.
type MockVirtualServicesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServicesGetterMockRecorder
}

// MockVirtualServicesGetterMockRecorder is the mock recorder for MockVirtualServicesGetter.
type MockVirtualServicesGetterMockRecorder struct {
	mock *MockVirtualServicesGetter
}

// NewMockVirtualServicesGetter creates a new mock instance.
func NewMockVirtualServicesGetter(ctrl *gomock.Controller) *MockVirtualServicesGetter {
	mock := &MockVirtualServicesGetter{ctrl: ctrl}
	mock.recorder = &MockVirtualServicesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualServicesGetter) EXPECT() *MockVirtualServicesGetterMockRecorder {
	return m.recorder
}

// VirtualServices mocks base method.
func (m *MockVirtualServicesGetter) VirtualServices(arg0 string) v1alpha30.VirtualServiceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualServices", arg0)
	ret0, _ := ret[0].(v1alpha30.VirtualServiceInterface)
	return ret0
}

// VirtualServices indicates an expected call of VirtualServices.
func (mr *MockVirtualServicesGetterMockRecorder) VirtualServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualServices", reflect.TypeOf((*MockVirtualServicesGetter)(nil).VirtualServices), arg0)
}

// MockVirtualServiceInterface is a mock of VirtualServiceInterface interface.
type MockVirtualServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceInterfaceMockRecorder
}

// MockVirtualServiceInterfaceMockRecorder is the mock recorder for MockVirtualServiceInterface.
type MockVirtualServiceInterfaceMockRecorder struct {
	mock *MockVirtualServiceInterface
}

// NewMockVirtualServiceInterface creates a new mock instance.
func NewMockVirtualServiceInterface(ctrl *gomock.Controller) *MockVirtualServiceInterface {
	mock := &MockVirtualServiceInterface{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualServiceInterface) EXPECT() *MockVirtualServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVirtualServiceInterface) Create(arg0 context.Context, arg1 *v1alpha3.VirtualService, arg2 v1.CreateOptions) (*v1alpha3.VirtualService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha3.VirtualService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVirtualServiceInterfaceMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVirtualServiceInterface)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockVirtualServiceInterface) Delete(arg0 context.Context, arg1 string, arg2 v1.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVirtualServiceInterfaceMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualServiceInterface)(nil).Delete), arg0, arg1, arg2)
}

// DeleteCollection mocks base method.
func (m *MockVirtualServiceInterface) DeleteCollection(arg0 context.Context, arg1 v1.DeleteOptions, arg2 v1.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockVirtualServiceInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockVirtualServiceInterface)(nil).DeleteCollection), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockVirtualServiceInterface) Get(arg0 context.Context, arg1 string, arg2 v1.GetOptions) (*v1alpha3.VirtualService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha3.VirtualService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualServiceInterfaceMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualServiceInterface)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockVirtualServiceInterface) List(arg0 context.Context, arg1 v1.ListOptions) (*v1alpha3.VirtualServiceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha3.VirtualServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualServiceInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualServiceInterface)(nil).List), arg0, arg1)
}

// Patch mocks base method.
func (m *MockVirtualServiceInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v1.PatchOptions, arg5 ...string) (*v1alpha3.VirtualService, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1alpha3.VirtualService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockVirtualServiceInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockVirtualServiceInterface)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockVirtualServiceInterface) Update(arg0 context.Context, arg1 *v1alpha3.VirtualService, arg2 v1.UpdateOptions) (*v1alpha3.VirtualService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha3.VirtualService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVirtualServiceInterfaceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVirtualServiceInterface)(nil).Update), arg0, arg1, arg2)
}

// UpdateStatus mocks base method.
func (m *MockVirtualServiceInterface) UpdateStatus(arg0 context.Context, arg1 *v1alpha3.VirtualService, arg2 v1.UpdateOptions) (*v1alpha3.VirtualService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha3.VirtualService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockVirtualServiceInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockVirtualServiceInterface)(nil).UpdateStatus), arg0, arg1, arg2)
}

// Watch mocks base method.
func (m *MockVirtualServiceInterface) Watch(arg0 context.Context, arg1 v1.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockVirtualServiceInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockVirtualServiceInterface)(nil).Watch), arg0, arg1)
}
